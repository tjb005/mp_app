<script type=text/javascript>

// time vector
var date_array_raw = <%=raw @date_array.as_json %>;
var parseDate = d3.time.format("%Y-%m-%d");

var date_array = [];
for	(i = 0; i < date_array_raw.length; i++) {
	date_array[i] = parseDate.parse(date_array_raw[i]);
};

// other data
var w1_wt 	 = <%=raw @w1_wt %>;
var w2_wt    = <%=raw @w2_wt %>;
var w1w2_wt  = <%=raw @w1w2_wt %>;

// array for d3 line
var dataset = new Array(date_array.length);
for	(i = 0; i < date_array.length; i++) {
	dataset[i] = [date_array[i], w1_wt[i], w1w2_wt[i]]
};

// graph properties
var w = document.getElementById('area1').offsetWidth;  // width
var h = document.getElementById('area1').offsetHeight; // height

var pad_vert = h/10; 	// padding for y axis from bottom
var pad_horz = w/7;		// padding for x axis from left

var y_range_bot = h/10; // y axis start point (distance from bottom)
var y_buffer = h/15; 	// buffer to reduce lowest y axis point

var title1 = "Empty Weight Vs Time";
var title_y_pos = h/30;

var axis1 = "Date";
var axis2 = "Wt (kg)";

// scales
var xScale = d3.time.scale()
.domain(d3.extent(dataset, function(d) { return d[0]; }))
.range([pad_horz, w]);
var yScale = d3.scale.linear()
.domain([d3.max(dataset, function(d) { 
    return Math.max(d[1], d[2]); }), d3.min(dataset, function(d) { return d[2]-y_buffer; })])
.range([y_range_bot, h-pad_vert]);

// select div
var svg = d3.select("#area1")
.append("svg")
.attr("width", w)
.attr("height", h);

// fill area
var	areafill1 = d3.svg.area()
    .x(function(d) { return xScale(d[0]); })
    .y0(h-pad_vert)
    .y1(function(d) { return yScale(d[1]); });

    svg.append("path")
        .datum(dataset)
        .attr("class", "areafill1")
        .attr("d", areafill1);

var	areafill2 = d3.svg.area()
    .x(function(d) { return xScale(d[0]); })
    .y0(function(d) { return yScale(d[1]); })
    .y1(function(d) { return yScale(d[2]); });

    svg.append("path")
        .datum(dataset)
        .attr("class", "areafill2")
        .attr("d", areafill2);

// valueline
var valueline = d3.svg.line()
.x(function(d) { return xScale(d[0]); })
.y(function(d) { return yScale(d[1]); });

var valueline2 = d3.svg.line()
.x(function(d) { return xScale(d[0]); })
.y(function(d) { return yScale(d[2]); });


// define x axis
var xAxis = d3.svg.axis()
.scale(xScale)
.orient("bottom")
.ticks(7)
.tickFormat(d3.time.format('%b %y'));

// create x axis    
svg.append("g")
.attr("class", "axis") 
.attr("transform", "translate(0," + (h - pad_vert) + ")")
.call(xAxis);

// define y axis
var yAxis = d3.svg.axis()
.scale(yScale)
.orient("left");

// create y axis
svg.append("g")
.attr("class", "axis")
.attr("transform", "translate(" + pad_horz + ",0)")
.call(yAxis);

// create line
svg.append("path")
.attr("class", "line")
.attr("d", valueline(dataset));

svg.append("path")
.attr("class", "line2")
.attr("d", valueline2(dataset));

// chart title
svg.append("text")
.attr("x", ((w-pad_horz)/ 2)+pad_horz/2)             
.attr("y", title_y_pos)
.text(title1);

// x axis label
svg.append("text")
.attr("x", ((w-pad_horz)/ 2)+pad_horz)             
.attr("y", h)
.text(axis1);


// y axis label
svg.append("text")
// .attr("transform", "rotate(-90)")
.attr("x", pad_horz/10)             
.attr("y", (h-pad_vert)/2 )
.text(axis2);

// tooltips
var focus = svg.append("g")
.attr("class", "focus")
.style("display", "none");

focus.append("circle")
.attr("r", 4.5);

focus.append("text")
.attr("x", -pad_vert)
.attr("dy", "1.5em");

svg.append("rect")
.attr("class", "overlay")
.attr("width", w)
.attr("height", h)
.on("mouseover", function() { focus.style("display", null); })
.on("mouseout", function() { focus.style("display", "none"); })
.on("mousemove", mousemove);

var bisectDate = d3.bisector(function(d) { return d[0]; }).left;

function mousemove() {
	var x0 = xScale.invert(d3.mouse(this)[0]),
	i = bisectDate(dataset, x0, 1),
	d0 = dataset[i - 1],
	d1 = dataset[i],
	d = x0 - d0[0] > d1[0] - x0 ? d1 : d0;
	focus.attr("transform", "translate(" + xScale(d[0]) + "," + yScale(d[2]) + ")");
	focus.select("text").text(d[2] + "kg");
}


// multiple tabs functions
function collapseElement(obj)
{
	var el = document.getElementById(obj);
	el.style.display = 'none';
}

function expandElement(obj)
{
	var el = document.getElementById(obj);
	el.style.display = '';
}

function collapsePages()
{
	var numFormPages = 3;
	for(i=1; i <= numFormPages; i++)
	{
		currPageId = ('page_' + i);
		collapseElement(currPageId);
	}
}

function activeClass(obj)
{
	var el = document.getElementById(obj);
	el.className = 'btn btn-default navbar-btn active';

	var numNavButtons = 3;
	for(i=1; i <= numNavButtons; i++)
	{
		currNavId = ('nav_button' + i);
		if(obj != currNavId){
			document.getElementById(currNavId).className = 'btn btn-default navbar-btn';
		}
	}
}

// load page_1 on start up
collapsePages(); 
expandElement('page_3');



</script>